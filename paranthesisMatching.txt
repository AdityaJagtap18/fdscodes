#include <iostream>
using namespace std;

class stack
{

public:
    int size;
    int top;
    char *arr;
};

int isFull(stack *ptr)
{
    if (ptr->top == (ptr->size - 1))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int isEmpty(stack *ptr)
{
    if (ptr->top < 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void push(stack *ptr, char val)
{
    if (isFull(ptr))
    {
        cout << "Stack OverFlow" << endl;
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}

char pop(stack *ptr)
{
    if (isEmpty(ptr))
    {
        cout << "Stack underflow" << endl;
        return -1;
    }
    else
    {
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}

bool match(char popped, char current)
{
    if (popped == '(' && current == ')')
    {
        return 1;
    }
    else if (popped == '[' && current == ']')
    {
        return 1;
    }
    else if (popped == '{' && current == '}')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int multiParenthesis(string exp)
{
    stack *s = new stack;
    s->size = 10;
    s->top = -1;
    s->arr = new char[(s->size)];
    char popped_ch;

    for (int i = 0; exp[i] != '\0'; i++)
    {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
        {
            push(s, exp[i]);
        }
        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
        {
            if (isEmpty(s))
            {
                return 0;
            }
            popped_ch = pop(s);
            if (!match(popped_ch, exp[i]))
            {
                return 0;
            }
        }
    }
    if (isEmpty(s))
    {
        return 1;
    }
    else
    {
        return 0;
    }

    delete s;
    s = nullptr;
}

int main()
{
    string s = "({[})]";

    if(multiParenthesis(s)){
        printf("Parenthsis matching \n");
    }
    else{
        printf("Parenthesis Not matching\n");
    }

    return 0;
}
